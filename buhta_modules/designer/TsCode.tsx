namespace Buhta {

    export class TsCode {
        constructor(public compInfo: ComponentInfo) {
            /*
             this.constructorCode = "";
             this.propertiesCode = "";
             */
        }

        constructorCode: string = "";
        //     propertiesCode: string = "";

        addProperty(assignName: string, propName: string, propType: string, initValue: Object) {
            // this.propertiesCode += "  " + propName + ": " + propType + ";\n";

            if (this.constructorCode !== "")
                this.constructorCode += "\n";
            this.constructorCode += assignName + "." + propName + "=";

            if (_.isString(initValue) || _.isNumber(initValue))
                this.constructorCode += JSON.stringify(initValue);
            else if (_.isDate(initValue))
                this.constructorCode += "new Date(" + JSON.stringify(initValue) + ")";
            else if (_.isUndefined(initValue))
                this.constructorCode += "undefined";
            else
                throw `TsCode.addProperty '${propName}': invalid type '${propType}'`;

            this.constructorCode += ";";
        }

        addPropertyRaw(assignName: string, propName: string, propType: string, rawInitValue: string) {
            //  this.propertiesCode += "  " + propName + ": " + propType + ";\n";

            if (this.constructorCode !== "")
                this.constructorCode += "\n";
            this.constructorCode += assignName + "." + propName + "=";

            this.constructorCode += rawInitValue;

            this.constructorCode += ";";
        }

        addRaw(rawInitValue: string) {
            if (this.constructorCode !== "")
                this.constructorCode += "\n";

            this.constructorCode += rawInitValue;

        }

        getCode(): string {
            let code = "";

            _.uniq(this.compInfo.references).forEach((refFileName) => {
                code += `/// <reference path=${JSON.stringify(refFileName)} />\n`;
            });

            // code += `/// <reference path="references.ts" />\n`;
            // code += `/// <reference path="testcomp2.ts" />\n`;
            code += `namespace ${this.compInfo.moduleName} {`;


            code += "export class " + this.compInfo.className;
            if (this.compInfo.inheritFrom)
                code += " extends " + this.compInfo.inheritFrom;
            code += "{\n";

            code += "constructor() {\n";
            code += "// constructor code is auto-generated by buhta designer " + new Date().toDateString() + "\n";
            code += "super();\n";

            // this.compInfo.references.forEach((refFileName) => {
            //     code += "this.references.push(" + JSON.stringify(refFileName) + ");\n";
            // });

            code += "this.$$className=" + JSON.stringify(this.compInfo.moduleName + "." + this.compInfo.className) + "\n";
            code += this.constructorCode + "\n";
            code += "// constructor code is auto-generated by buhta designer\n";
            code += "}\n";

            //code += "  " + this.propertiesCode + "\n";

            code += "  }\n";
            code += "}\n";

            code += `
// this code is auto-generated by buhta designer
Buhta.componentRegistry[${JSON.stringify(this.compInfo.moduleName + "." + this.compInfo.className)}] = {
    name: ${JSON.stringify(this.compInfo.name)},
    className: ${JSON.stringify(this.compInfo.className)},
    moduleName: ${JSON.stringify(this.compInfo.moduleName)},
    inheritFrom: ${JSON.stringify(this.compInfo.inheritFrom)},
    description: ${JSON.stringify(this.compInfo.description)},
    parent: ${JSON.stringify(this.compInfo.parent)},
    references: ${JSON.stringify(this.compInfo.references)},
    createInstance:(): Buhta.DesignedComponent => new ${this.compInfo.moduleName + "." + this.compInfo.className}() 
};
// this code is auto-generated by buhta designer`;

            return code;
        }
    }


}